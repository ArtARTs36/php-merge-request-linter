rules:
  "@mr-linter/has_any_labels_of":
    labels:
      - Feature
      - Bug
      - Docs
      - Tests
      - Optimization

  "@mr-linter/title_must_starts_with_any_prefix":
    prefixes:
      - '[Feature]'
      - '[Bug]'
      - '[Docs]'
      - '[Tests]'
      - '[Optimization]'

  "@mr-linter/description_not_empty": {}

  "@mr-linter/update_changelog":
    when:
      targetBranch:
        equals: "master"
      title:
        notStartsAny:
          - '[Tests]'
          - '[Docs]'

  "@mr-linter/no_ssh_keys":
    stopOnFirstFailure: true
    critical: false

  "@mr-linter/has_changes":
    - changes:
      - file: "src/Version.php"
        updatedPhpConstant: "VERSION"
      when:
        targetBranch:
          equals: "master"
        title:
          notStartsAny:
            - '[Tests]'
            - '[Docs]'

  "@mr-linter/disable_file_extensions":
    extensions:
      - pem
      - pub

  custom:
    - definition: "Branch must be in kebab-case"
      rules:
        sourceBranch:
          isKebabCase: true

    - definition: "Labels must be in StudlyCase"
      rules:
        labels:
          $all:
            isStudlyCase: true

    - definition: "Description must have list of fixed bugs"
      rules:
        descriptionMarkdown:
          containsHeading2: "Fixed"
      when:
        labels:
          has: "Bug"

    - definition: "Description must have list of features"
      rules:
        descriptionMarkdown:
          containsHeading2: "Added"
      when:
        labels:
          has: "Feature"

notifications:
  channels:
    dev:
      type: 'telegram_bot'
      chat_id: 'env(MR_LINTER_TELEGRAM_CHAT_ID)'
      bot_token: 'env(MR_LINTER_TELEGRAM_BOT_TOKEN)'
      sound_at: '09:00-21:00'
  on:
    lint_finished:
      channel: 'dev'
      template: |
        üëÄ Review on PR "{{ request.title | raw }}" by {{ request.author.login }} at {{ request.createdAt.format('Y-m-d H:i') }}
        
        üå≤ {{ request.sourceBranch }} ‚û° {{ request.targetBranch }}
        
        üåê {{ request.uri }}
        
        üìâ Notes: {{ result.notes.count }}
        
        {% for note in result.notes %}
        - {{ note.description | raw }}
        {% endfor %}

ci:
  github_actions:
    credentials:
      token: 'env(MR_LINTER_GITHUB_HTTP_TOKEN)'

comments:
  strategy: 'single'
  messages:
    - template: |
        I found {{ result.notes.count }} notes in your Pull Request:
        {% for note in result.notes %}
        - {{ note.description | raw }}
        {% endfor %}
      when:
        result.notes:
          isEmpty: false

    - template: |
        I didn't find any notes in your Pull Request.
      when:
        result.notes:
          isEmpty: true
