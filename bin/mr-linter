#!/usr/bin/env php
<?php

use ArtARTs36\FileSystem\Local\LocalFileSystem;
use ArtARTs36\MergeRequestLinter\Ci\System\DefaultSystems;
use ArtARTs36\MergeRequestLinter\Condition\DefaultOperators;
use ArtARTs36\MergeRequestLinter\Condition\OperatorFactory;
use ArtARTs36\MergeRequestLinter\Condition\OperatorResolver;
use ArtARTs36\MergeRequestLinter\Configuration\Loader\CompositeLoader;
use ArtARTs36\MergeRequestLinter\Configuration\Loader\ConfigLoaderProxy;
use ArtARTs36\MergeRequestLinter\Configuration\Loader\CredentialMapper;
use ArtARTs36\MergeRequestLinter\Configuration\Loader\JsonConfigLoader;
use ArtARTs36\MergeRequestLinter\Configuration\Loader\PhpConfigLoader;
use ArtARTs36\MergeRequestLinter\Configuration\Loader\RulesMapper;
use ArtARTs36\MergeRequestLinter\Configuration\Resolver\ConfigResolver;
use ArtARTs36\MergeRequestLinter\Configuration\Resolver\PathResolver;
use ArtARTs36\MergeRequestLinter\Configuration\Value\EnvTransformer;
use ArtARTs36\MergeRequestLinter\Console\DumpCommand;
use ArtARTs36\MergeRequestLinter\Console\InstallCommand;
use ArtARTs36\MergeRequestLinter\Console\LintCommand;
use ArtARTs36\MergeRequestLinter\Environment\LocalEnvironment;
use ArtARTs36\MergeRequestLinter\Linter\Runner\RunnerFactory;
use ArtARTs36\MergeRequestLinter\Rule\DefaultRules;
use ArtARTs36\MergeRequestLinter\Rule\Factory\Argument\Builder;
use ArtARTs36\MergeRequestLinter\Rule\Factory\Argument\DefaultResolvers;
use ArtARTs36\MergeRequestLinter\Rule\Factory\Constructor\ConstructorFinder;
use ArtARTs36\MergeRequestLinter\Rule\Factory\Resolver;
use ArtARTs36\MergeRequestLinter\Rule\Factory\RuleFactory;
use ArtARTs36\MergeRequestLinter\Support\DataStructure\Map;
use ArtARTs36\MergeRequestLinter\Support\PropertyExtractor;
use Symfony\Component\Console\Application;

$loaded = false;

if (isset($_composer_autoload_path)) {
    $loaded = true;
    
    require $_composer_autoload_path;
} else {
    foreach ([$_composer_autoload_path ?? '../../..', '../..', '..', 'vendor', '../vendor', '../../vendor'] as $path) {
        if (\is_file($autoload_file = __DIR__ . '/' . $path . '/autoload.php')) {
            require $autoload_file;
            $loaded = true;
            break;
        }
    }
}

if ($loaded === false) {
    fwrite(\STDERR, 'Composer autoload.php not found');

    exit(1);
}

$application = new Application('Merge Request Linter', '0.3.0');

$filesystem = new LocalFileSystem();
$environment = new LocalEnvironment();
$ciSystemsMap = DefaultSystems::map();
$runnerFactory = new RunnerFactory($environment, $ciSystemsMap);

$configLoader = new CompositeLoader([
    'php' => new PhpConfigLoader($filesystem),
    'json' => new ConfigLoaderProxy(static function () use ($filesystem, $environment, $ciSystemsMap) {
        $ruleFactory = new RuleFactory(
            new Builder(
                DefaultResolvers::get(),
            ),
            new ConstructorFinder(),
        );

        $operatorFactory = new OperatorFactory(DefaultOperators::map(), new PropertyExtractor());

        return new JsonConfigLoader(
            $filesystem,
            new CredentialMapper(
                [new EnvTransformer($environment)],
                $ciSystemsMap,
            ),
            new RulesMapper(
                new Resolver(DefaultRules::map(), $ruleFactory, new OperatorResolver($operatorFactory)),
            ),
        );
    }),
]);

$configResolver = new ConfigResolver(new PathResolver($filesystem), $configLoader);

$application->add(new LintCommand($configResolver, $runnerFactory));
$application->add(new InstallCommand());
$application->add(new DumpCommand($configResolver));

$application->run();
