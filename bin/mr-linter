#!/usr/bin/env php
<?php

use ArtARTs36\FileSystem\Local\LocalFileSystem;
use ArtARTs36\MergeRequestLinter\Configuration\CompositeLoader;
use ArtARTs36\MergeRequestLinter\Configuration\ConfigLoaderProxy;
use ArtARTs36\MergeRequestLinter\Configuration\JsonConfigLoader;
use ArtARTs36\MergeRequestLinter\Configuration\PhpConfigLoader;
use ArtARTs36\MergeRequestLinter\Configuration\Value\EnvTransformer;
use ArtARTs36\MergeRequestLinter\Console\DumpCommand;
use ArtARTs36\MergeRequestLinter\Console\InstallCommand;
use ArtARTs36\MergeRequestLinter\Console\LintCommand;
use ArtARTs36\MergeRequestLinter\Environment\LocalEnvironment;
use ArtARTs36\MergeRequestLinter\Rule\DefaultRules;
use ArtARTs36\MergeRequestLinter\Rule\Factory\Argument\Builder;
use ArtARTs36\MergeRequestLinter\Rule\Factory\Argument\DefaultResolvers;
use ArtARTs36\MergeRequestLinter\Rule\Factory\Resolver;
use ArtARTs36\MergeRequestLinter\Rule\Factory\RuleFactory;
use Symfony\Component\Console\Application;

$loaded = false;

if (isset($_composer_autoload_path)) {
    $loaded = true;
    
    require $_composer_autoload_path;
} else {
    foreach ([$_composer_autoload_path ?? '../../..', '../..', '..', 'vendor', '../vendor', '../../vendor'] as $path) {
        if (\is_file($autoload_file = __DIR__ . '/' . $path . '/autoload.php')) {
            require $autoload_file;
            $loaded = true;
            break;
        }
    }
}

if ($loaded === false) {
    fwrite(\STDERR, 'Composer autoload.php not found');

    exit(1);
}

$application = new Application('Merge Request Linter', '0.1.1');

$configLoader = new CompositeLoader([
    'php' => new PhpConfigLoader(),
    'json' => new ConfigLoaderProxy(static function () {
        return new JsonConfigLoader(
            Resolver::make(DefaultRules::RULES, new RuleFactory(new Builder(
                DefaultResolvers::get(),
            ))),
            new LocalFileSystem(),
            [new EnvTransformer(new LocalEnvironment())],
        );
    }),
]);

$application->add(new LintCommand($configLoader));
$application->add(new InstallCommand());
$application->add(new DumpCommand($configLoader));

$application->run();
