#!/usr/bin/env php
<?php

use ArtARTs36\FileSystem\Local\LocalFileSystem;
use ArtARTs36\MergeRequestLinter\CI\System\DefaultSystems;
use ArtARTs36\MergeRequestLinter\Configuration\Loader\ArrayConfigLoaderFactory;
use ArtARTs36\MergeRequestLinter\Configuration\Loader\CompositeLoader;
use ArtARTs36\MergeRequestLinter\Configuration\Loader\ConfigLoaderProxy;
use ArtARTs36\MergeRequestLinter\Configuration\Loader\PhpConfigLoader;
use ArtARTs36\MergeRequestLinter\Configuration\Resolver\ConfigResolver;
use ArtARTs36\MergeRequestLinter\Configuration\Resolver\PathResolver;
use ArtARTs36\MergeRequestLinter\Console\DumpCommand;
use ArtARTs36\MergeRequestLinter\Console\InstallCommand;
use ArtARTs36\MergeRequestLinter\Console\LintCommand;
use ArtARTs36\MergeRequestLinter\Environment\LocalEnvironment;
use ArtARTs36\MergeRequestLinter\Linter\Runner\RunnerFactory;
use Symfony\Component\Console\Application;

$loaded = false;

if (isset($_composer_autoload_path)) {
    $loaded = true;
    
    require $_composer_autoload_path;
} else {
    foreach ([$_composer_autoload_path ?? '../../..', '../..', '..', 'vendor', '../vendor', '../../vendor'] as $path) {
        if (\is_file($autoload_file = __DIR__ . '/' . $path . '/autoload.php')) {
            require $autoload_file;
            $loaded = true;
            break;
        }
    }
}

if ($loaded === false) {
    fwrite(\STDERR, 'Composer autoload.php not found');

    exit(1);
}

$application = new Application('Merge Request Linter', '0.5.1');

$filesystem = new LocalFileSystem();
$environment = new LocalEnvironment();
$ciSystemsMap = DefaultSystems::map();
$runnerFactory = new RunnerFactory($environment, $ciSystemsMap);

$arrayConfigLoaderFactory = new ArrayConfigLoaderFactory($filesystem, $environment);

$configLoader = new CompositeLoader([
    'php' => new PhpConfigLoader($filesystem),
    'json' => new ConfigLoaderProxy(static fn () => $arrayConfigLoaderFactory->create('json')),
    'yaml' => new ConfigLoaderProxy(static fn () => $arrayConfigLoaderFactory->create('yaml')),
    'yml' => new ConfigLoaderProxy(static fn () => $arrayConfigLoaderFactory->create('yaml')),
]);

$configResolver = new ConfigResolver(new PathResolver($filesystem), $configLoader);

$application->add(new LintCommand($configResolver, $runnerFactory));
$application->add(new InstallCommand());
$application->add(new DumpCommand($configResolver));

$application->run();
